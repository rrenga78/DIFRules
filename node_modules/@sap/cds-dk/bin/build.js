module.exports = Object.assign(build, {
    options: ['--project', '--src', '--dest', '--for', '--use', '--opts', '--log-level', '--options-model'],
    shortcuts: ['-in', '-s', '-o', '-4'],
    flags: ['--clean', '--no-clean', '--ws'], // REVISIT: --clean is deprecated, backward compatibility
    help: `
# SYNOPSIS

    *cds build* [<project>] [<options>]

    Builds all modules in the current project by compiling contained CDS
    sources.
    The modules are folders in the project root directory. All well known
    modules (db, srv, app) or those configured by build tasks defined in
    *package.json* or *.cdsrc.json* are built.

# OPTIONS

     *-4 | --for* hana | java | nodejs | mtx | mtx-sidecar | mtx-extension
        Name of the build task that is applied to the source folder, either
        explicitly configured in the build task list or generated out of the
        project setup
        For example, the 'hana' build task will create SAP HANA artefacts.
        The module folder can be defined using option '--src', a default is used
        otherwise.

    *-s | --src* <folder>
        The module folder to build using the build task defined by option
        '--for'.
        This option is only supported when building an individual module of the
        project.
        The folder is resolved based on '<project>/<cds.env.build.target>'.
        A default is used based on the type of the build task, for example, the
        folder 'db' is used for a
        *hana* build task, 'srv' for *nodejs* or *java* build task.

    *-o | --dest* <folder>
        Output folder of the build task. The type of build task is defined by
        option '--for'.
        The folder is resolved based on '<project>/<cds.env.build.target>'.
        Default - folder defined by option '--src'.
        Note: <cds.env.build.target> can be configured in *.cdsrc.json* or
        *package.json*.
        For Node.js projects the folder 'gen' is used by default. The output is
        written to '<project>/gen/*<dest>*/*'.
        For Java projects '.' is used by default. The output is written to
        '<project>/*<dest>*/*'.

    *--opts* <build task specific options>
        Add a comma-separated list of build task specific options in the format
        <opt1>=[value1,value2],<opt2>=value.
        For example, --opts model=[db,srv,schema.cds] loads and compiles the CDS
        model based on the given sources.

    *--profile* <profile,...>
        Loads the configuration data for the specified profile(s) and executes
        'cds build' based on this profile settings.
        E.g. you may want to create the HANA deployment artefacts only if the
        *production* profile is set.
        The *development* profile is used by default.

    *--production*
        Shortcut for '--profile production'

    *--log-level* <debug | info | warn | error>
        Choose which level of cds build messages to log, default is *warn*.

    *-in | --project* [<project>]
        Runs 'cds build' for the specified project, default is current working
        directory.
        
    *--no-clean* (beta)
        Skips cleaning the build output folder before running the actual build
        operation. Clients need to clean the output folder upfront to ensure
        consistent build results.

    *--ws* (beta)
        Enable tarball based packaging of npm workspace dependencies for Node.js apps.
        This feature can be used to package npm workspace dependencies as part of your 
        mono or multi-repo deployment.
        Tarball files are created for all 'dependencies' and 'devDependencies' 
        of your project for which a npm workspace exists. The '*' dependency is replaced
        by the correct tarball file URL.
        See 'npm workspaces' for further details.

# EXAMPLES

   *cds* build
   *cds* build --production --log-level info
   *cds* build --for hana
   *cds* build --for java --src service1
   *cds* build --for java --dest ../srv/target --opts model=[db/model,srv,schema]
`})

async function build([project], options = {}) {
    const path = require('path')

    const cds = require('../lib/cds')

    // plugins are loaded based on cds.root path
    cds.root = path.resolve(process.cwd(), project || options.project || '.')

    // IMPORTANT: call plugins before subsequent access to cds.env
    await cds.plugins

    cds.env = cds.env.for('cds', cds.root);
    delete options.project // avoid that relative project paths are resolved twice

    const { build } = require('../lib/build')
    const [major] = cds.version.split('.')
    if (Number(major) < 6) {
        throw "This application uses @sap/cds version < 6, which is not compatible with the installed @sap/cds-dk version >= 7. Update @sap/cds to version >= 6."
    }
    if (typeof options["options-model"] === "string") {
        options.opts = "model=[" + options["options-model"].split(",").map((entry) => entry.trim()) + "]"
        delete options["options-model"]
    }
    if (options["no-clean"]) {
        // mapping to the existing 'clean' option
        if (options["no-clean"] === "true" || options["no-clean"] === true) {
            options.clean = false
        }
        delete options["no-clean"]
    }

    await build(options)
}
