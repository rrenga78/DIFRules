function stacklessError(message) {
    const { stackTraceLimit } = Error;
    Error.stackTraceLimit = 0;
    const error = new Error(message);
    Error.stackTraceLimit = stackTraceLimit;
    return error;
}

require('axios').interceptors.response.use(
    response => response,
    axError => {
        const { inspect } = require('util');
        const { url, method } = axError.config ?? {};
        const { response = {} } = axError;
        const { status, statusText } = response;
        let { data } = response;
        if (Buffer.isBuffer(data)) {
            data = data.toString();
            try {
                data = JSON.parse(data);
            } catch (error) { /* unexpected; data will be included in error below */ }
        }
        const reason = data?.error /* RFC 6749 */ && (typeof data.error === 'string' ? data.error : inspect(data.error));
        const message = (url && method ? `${method.toUpperCase()} ${url} ` : '') +
            'failed' +
            (status || statusText ? ':' : '') +
            (status ? ` ${status}` : '') +
            (statusText ? ` ${statusText}` : '') +
            (reason ? `. ${reason}` : '') +
            (data ? `. Details: '${data.error_description /* RFC 6749 */ || inspect(data)}'` : '');

        const error = stacklessError(message);
        error.status = status;
        if (require('../').debug('req')) {
            error.cause = axError;
        }
        return Promise.reject(error);
    }
);
