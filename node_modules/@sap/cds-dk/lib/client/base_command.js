const path = require('path');
const fs = require('fs').promises;

require('../util/pruneAxiosErrors');

const { getMessage } = require('./helper/logging');

const MTX_URL_PATH_PREFIX = 'mtx/v1/model/';
const CUSTOM_FILE_URL_SUFFIX = 'customTenantContent';

module.exports = class BaseCommand {

    static get CUSTOM_FILE_URL_SUFFIX() { return CUSTOM_FILE_URL_SUFFIX; }

    static async checkProject(folder) {
        const exists = await fs.access(path.join(folder, 'package.json')).then(() => true).catch(() => false)
        return exists;
    }

    static handleHttpError(error, params, { url, command } = {}) {
        url = url ?? params.get('appUrl');
        const prefix = `Request to ${url} failed`;
        switch (error.status) {
            case 401:
                throw getMessage(`${prefix}: invalid authentication.\nRetry with valid passcode${
                    params.has('passcodeUrl') ? ` from ${params.get('passcodeUrl')}` : ''
                } or username/password (required if SaaS app is configured with mocked-auth).`, { error, command });
            case 403:
                throw getMessage(prefix + ': insufficient authorization. Ensure client has all necessary roles.', { error, command });
            case 404:
                throw getMessage(prefix + ': resource not found.', { error, command });
            case 422:
                // Compilation or native-extension error.
                throw getMessage(prefix + '.', { error, command });
            default:
                // Unexpected error should be transparent to user.
                throw error;
        }
    }

    static concatUrls(...parts) {
        return parts
            .map((p, i) => i === 0
                ? p.replace(/\/$/ /*end slash*/, '')
                : i === parts.length - 1
                    ? p.replace(/^\// /*begin slash*/, '')
                    : p.replace(/^\/|\/$/g /*both*/, ''))
            .join('/');
    }

    static getMtxApiUrl(url, action) {
        return BaseCommand.concatUrls(url, MTX_URL_PATH_PREFIX, action);
    }
}
