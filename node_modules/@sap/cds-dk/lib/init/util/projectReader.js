const cds = require('../../cds')
const { join, resolve, basename } = require('path')
const { fs, exists } = cds.utils
const { parseXml } = require('./xml')
const { REGEX_JAVA_VERSION } = require('../constants')
const DEBUG = cds.debug('cli')

module.exports = new class ProjectReader {

    constructor() {
        this.readProject = this.readProject.bind(this)

        // 1. Use project name and static default values
        this.appVersion = cds.cli.options.add?.has('java') ? '1.0.0-SNAPSHOT' : '1.0.0'
        this.appName = this.appId = basename(cds.root)
        this.appDescription = 'A simple CAP project.'

        // 2. Use either pom.xml or package.json
        if (exists('pom.xml')) {
            const { artifactId = [], description = [], version = [], properties = [] } = parseXml(resolve(cds.root, 'pom.xml')) ?? {}
            const v = version[0] === '${revision}' ? properties[0]?.revision[0] : version[0]
            if (v && REGEX_JAVA_VERSION.test(v)) this.appVersion = v
            if (artifactId[0])  this.appName = this.appId = artifactId[0].split(/-parent/)[0]
            if (description[0]) this.appDescription = description[0]
        }
        else if (exists('package.json')) {
            const { name, version, description } = JSON.parse(fs.readFileSync(join(cds.root, 'package.json')))
            this.appVersion = version
            const segments = name.trim().replace(/@/g, '').split('/').map(encodeURIComponent)
            this.appName = segments[segments.length - 1]
            this.appId = segments.join('.')
            this.appDescription = description ?? this.appDescription
        }
    }

    // REVISIT: There should be a better (and parallelizable) API provided by cds.env
    /**
     * Returns cds.env using 'production' profile by default as mta deployment is executed with having production profile set.
     */
    getEnv(profile = 'production') {
        const cdsEnvVar = process.env.CDS_ENV
        process.env.CDS_ENV = profile
        try {
            // REVISIT: this is invoked 5 times for cds add multitenancy
            return cds.env.for('cds')
        } finally {
            cdsEnvVar ? process.env.CDS_ENV = cdsEnvVar : delete process.env.CDS_ENV
        }
    }

    async readProject() {
        const env = this.getEnv()
        const { appVersion, appName, appId, appDescription } = this
        DEBUG?.({ env })

        const _hasFacet = template => require(`../template/${template}`).hasFacet(env)
        const project = {
            get profile()  { return cds.cli.options?.for },
            get language() { return exists('pom.xml') ? 'java' : 'nodejs' },
            get srvPath()  { return join(env.build.target, env.folders.srv.replace(/\/$/, '')).replace(/\\/g, '/') },
            get archiveName() {
                const pom = parseXml(resolve(cds.root, env.folders.srv, 'pom.xml'))
                return (pom?.artifactId?.[0] ?? basename(cds.root)) + '-exec.' + pom?.packaging?.[0]
            },
            get db() {
                const folder = env.folders.db
                const name = folder.replace(/\/$/, '')
                const path = join(env.build.target, name).replace(/\\/g, '/')
                return { folder, name, path }
            },
            get configFile()     { return exists('pom.xml') ? '.cdsrc.json' : 'package.json' },
            get isNodejs()       { return _hasFacet('nodejs') },
            get isJava()         { return _hasFacet('java') },
            get isMultitenant()  { return _hasFacet('multitenancy') },
            get isExtensible()   { return _hasFacet('extensibility') },
            get hasHana()        { return _hasFacet('hana') },
            get hasXsuaa()       { return _hasFacet('xsuaa') },
            get hasApprouter()   { return _hasFacet('approuter') },
            get hasDestination() { return _hasFacet('destination') },
            get hasHtml5Repo()   { return _hasFacet('html5-repo') },
            get hasMta()         { return _hasFacet('mta') },
            get hasHelm()        { return _hasFacet('helm') },
            get appPath()        { return env.folders.app ?? 'app' },
            get appVersion()     { return appVersion },
            get appName()        { return appName },
            get cleanedAppName() { return appName.replace('_', '-') }, // Required when _ isn't allowed in the namespace
            get appId()          { return appId },
            get appDescription() { return appDescription },
        }

        DEBUG?.({ project })
        return project
    }
}
