const { join } = require('path');
const cds = require('../../../cds')
const { exists, rimraf } = cds.utils
const { readProject } = require('../../util/projectReader');
const { mergeYAML } = require('../../util/merge')
const { parseMd5File, writeMd5File, copyAndTrack } = require('../../util/md5')

module.exports = class HelmTemplate extends require('../templateBase') {

    constructor(oldTrackingData = undefined, newTrackingData = {}) {
        super()
        this.oldTrackingData = oldTrackingData;
        this.newTrackingData = newTrackingData;
    }

    getRelatedFacets() {
        return ['hana', 'xsuaa', 'enterprise-messaging', 'enterprise-messaging-shared', 'destination' , 'multitenancy', 'extensibility', 'approuter', 'connectivity']
    }

    static hasFacet() {
        // REVISIT: this works, but could be semantically nicer with a 'shouldRunDependentMerging' or the like
        const { add } = cds.cli.options
        if (add.has('mta') && !add.has('helm')) return false
        return exists(join('chart', 'values.yaml'))
    }

    async canRun() {
        if (cds.cli.options.force) {
            await rimraf(join('chart'))
            return true
        }
        return true
    }

    async addSubChart(subchart, force = false) {
        const subchartPath = join('chart', 'charts', subchart);
        const isInternal = !force && await this.isInternal();
        if(!exists(subchartPath) && !isInternal) {
            await copyAndTrack(
                join(__dirname, 'subcharts', subchart),
                subchartPath,
                this
            )

            return true;
        }

        return false;
    }

    async isInternal() {
        return !exists(join('chart', 'charts', 'web-application')) || cds.cli.options['internal-unified-runtime-charts'];
    }

    async addDependency(name, alias){
        const project = await readProject();
        const isInternal = await this.isInternal();
        await mergeYAML(
            join('chart', 'Chart.yaml'),
            {
                dependencies: [
                    {
                        name,
                        alias,
                        version: '>0.0.0',
                        ...(isInternal) && { repository: 'https://int.repositories.cloud.sap/artifactory/virtual-unified-runtime-helm-dmz' }
                    }
                ]
            },
            project,
            { additions: [{
                in: `dependencies`,
                where: [{
                    property: 'alias',
                    isEqualTo: alias
                }]
            }]}
        )
    }

    async run() {
        const project = await readProject()
        const isInternal = cds.cli.options['internal-unified-runtime-charts'] !== undefined && cds.cli.options['internal-unified-runtime-charts'];
        this.oldTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'));
        await this.addSubChart('web-application', !isInternal);
        await copyAndTrack(
            join(__dirname, 'chart'),
            join('chart'),
            this
        )

        await mergeYAML(
            join('chart', 'Chart.yaml'),
            join(__dirname, 'files', 'Chart.yaml.hbs'),
            project
        )

        await this.addDependency('web-application', 'srv');

        await mergeYAML(
            join('chart', 'values.yaml'),
            join(__dirname, 'files', 'values.yaml.hbs'),
            project
        )
        await writeMd5File(join('chart', '.cds-add-helm-files.md5'), this.newTrackingData);
    }
}
