const { join } = require('path')
const cds = require('../../../cds')
const { read } = cds.utils
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { parseMd5File, writeMd5File } = require('../../util/md5')
const { srvNode4, srvJava4, enterpriseMessaging } = require('../_merging/registry-mta')

module.exports = class EnterpriseMessagingSharedTemplate extends require('../templateBase') {

  async canRun() {
    const { isJava } = await readProject()
    if (isJava) throw `'cds add enterprise-messaging-shared' is not available for Java yet`
    return true
  }

  static hasFacet(env) {
    return env.requires?.messaging?.kind === 'enterprise-messaging-amqp'
  }

  async run() {
    const project = await readProject()
    const { configFile } = project
    project.shortcut = !(await read(configFile)).cds?.requires?.messaging?.kind
    await mergeJSON(configFile, join(__dirname, 'files', 'package.json.hbs'), project)
    await mergeJSON('event-mesh.json', join(__dirname, 'files', 'event-mesh.json.hbs'), project)
  }

  async runDependentMerging(context = {}) {
    const project = await readProject()
    const { hasMta, hasHelm, isNodejs, srvPath } = project

    if (hasMta) {
      const srv = (isNodejs ? srvNode4 : srvJava4)(srvPath)
      await mergeYAML(
          'mta.yaml',
          join(__dirname, 'files', 'mta.yaml.hbs'),
          project,
          {
              additions: [srv, enterpriseMessaging],
              relationships: [{
                  insert: [enterpriseMessaging, 'name'],
                  into: [srv, 'requires', 'name']
              }]
          }
      )
    }

    if (hasHelm) {
      let isIndependentCommand = false
      if (Object.keys(context).length == 0){
          isIndependentCommand = true
          context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'))
      }
      await mergeYAML(join('chart', 'values.yaml'), join(__dirname, 'files', 'values.yaml'))
      const HelmTemplate = require(`../helm`);
      const helmTemplate = new HelmTemplate(context.oldTrackingData, context.newTrackingData);
      isIndependentCommand = isIndependentCommand | await helmTemplate.addSubChart('service-instance');
      await helmTemplate.addDependency('service-instance', 'event-mesh');
      if (isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData)
    }
  }
}
