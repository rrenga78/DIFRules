const { join } = require('path')
const cds = require('../../../cds')
const { read } = cds.utils
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const mvn = require('../../util/mvn')
const { srvNode4, srvJava4, postgres, postgresDeployer } = require('../_merging/registry-mta')

module.exports = class PostgresTemplate extends require('../templateBase') {

  async canRun() {
    const { hasMta, hasHelm } = await readProject(this.options)
    if (hasHelm && !hasMta) throw `'cds add postgres' is not available for Kyma yet`
    return true
  }

  static hasFacet(env) {
    return env.requires?.db?.kind === 'postgres'
  }

  async run() {
    const project = await readProject(this.options)
    const { configFile, isJava } = project
    project.shortcut = !(await read(configFile)).cds?.requires?.db?.kind
    await mergeJSON(configFile, join(__dirname, 'files', 'package.json.hbs'), project)
    if (isJava) await mvn.add('postgresql')
    await this.runDependentMerging()
  }

  async runDependentMerging() {
    const project = await readProject(this.options)
    const { hasMta, isNodejs, srvPath } = project

    if (hasMta) {
      const srv = (isNodejs ? srvNode4 : srvJava4)(srvPath)
      await mergeYAML(
          'mta.yaml',
          join(__dirname, 'files', 'mta.yaml.hbs'),
          project,
          {
              additions: [srv, postgres, postgresDeployer],
              relationships: [{
                  insert: [postgres, 'name'],
                  into: [srv, 'requires', 'name']
              }, {
                insert: [postgres, 'name'],
                into: [postgresDeployer, 'requires', 'name']
            }]
          }
      )
    }
  }
}
